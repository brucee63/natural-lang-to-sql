"""Initial

Revision ID: 204f97e8c17a
Revises: 
Create Date: 2025-04-29 21:07:12.036887

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import pgvector.sqlalchemy # Add this import


# revision identifiers, used by Alembic.
revision: str = '204f97e8c17a'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('databases',
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_index(op.f('ix_databases_id'), 'databases', ['id'], unique=False)
    op.create_table('database_schemas',
    sa.Column('database_id', sa.UUID(), nullable=False),
    sa.Column('schema_name', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('embedding', pgvector.sqlalchemy.vector.VECTOR(dim=1536), nullable=True),
    sa.Column('include_in_context', sa.Boolean(), nullable=False),
    sa.Column('extra_metadata', sa.JSON(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['database_id'], ['databases.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('database_id', 'schema_name', name='uq_database_schemas_database_id_schema_name')
    )
    op.create_index(op.f('ix_database_schemas_id'), 'database_schemas', ['id'], unique=False)
    op.create_table('sql_samples',
    sa.Column('database_id', sa.UUID(), nullable=False),
    sa.Column('query_text', sa.Text(), nullable=False),
    sa.Column('nl_description', sa.Text(), nullable=True),
    sa.Column('embedding', pgvector.sqlalchemy.vector.VECTOR(dim=1536), nullable=True),
    sa.Column('complexity', sa.SmallInteger(), nullable=True),
    sa.Column('tags', sa.ARRAY(sa.Text()), nullable=True),
    sa.Column('avg_rating', sa.Float(), nullable=True),
    sa.Column('feedback_count', sa.Integer(), nullable=True),
    sa.Column('extra_metadata', sa.JSON(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['database_id'], ['databases.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_sql_samples_id'), 'sql_samples', ['id'], unique=False)
    op.create_table('db_tables',
    sa.Column('schema_id', sa.UUID(), nullable=False),
    sa.Column('table_name', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('embedding', pgvector.sqlalchemy.vector.VECTOR(dim=1536), nullable=True),
    sa.Column('include_in_context', sa.Boolean(), nullable=False),
    sa.Column('sample_data', sa.JSON(), nullable=True),
    sa.Column('extra_metadata', sa.JSON(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['schema_id'], ['database_schemas.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('schema_id', 'table_name', name='uq_db_tables_schema_id_table_name')
    )
    op.create_index(op.f('ix_db_tables_id'), 'db_tables', ['id'], unique=False)
    op.create_table('query_feedback',
    sa.Column('database_id', sa.UUID(), nullable=False),
    sa.Column('sql_sample_id', sa.UUID(), nullable=True),
    sa.Column('nl_query', sa.Text(), nullable=True),
    sa.Column('embedding', pgvector.sqlalchemy.vector.VECTOR(dim=1536), nullable=True),
    sa.Column('generated_sql', sa.Text(), nullable=True),
    sa.Column('rating', sa.SmallInteger(), nullable=True),
    sa.Column('feedback_text', sa.Text(), nullable=True),
    sa.Column('is_correct', sa.Boolean(), nullable=True),
    sa.Column('correction', sa.Text(), nullable=True),
    sa.Column('user_id', sa.String(length=255), nullable=True),
    sa.Column('extra_metadata', sa.JSON(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['database_id'], ['databases.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['sql_sample_id'], ['sql_samples.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_query_feedback_id'), 'query_feedback', ['id'], unique=False)
    op.create_table('query_usage_stats',
    sa.Column('database_id', sa.UUID(), nullable=False),
    sa.Column('sql_sample_id', sa.UUID(), nullable=True),
    sa.Column('nl_query', sa.Text(), nullable=True),
    sa.Column('similarity_score', sa.Float(), nullable=True),
    sa.Column('execution_time_ms', sa.Integer(), nullable=True),
    sa.Column('success', sa.Boolean(), nullable=True),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['database_id'], ['databases.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['sql_sample_id'], ['sql_samples.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_query_usage_stats_id'), 'query_usage_stats', ['id'], unique=False)
    op.create_table('db_columns',
    sa.Column('table_id', sa.UUID(), nullable=False),
    sa.Column('column_name', sa.String(length=255), nullable=False),
    sa.Column('data_type', sa.String(length=100), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('embedding', pgvector.sqlalchemy.vector.VECTOR(dim=1536), nullable=True),
    sa.Column('is_primary_key', sa.Boolean(), nullable=True),
    sa.Column('is_foreign_key', sa.Boolean(), nullable=True),
    sa.Column('is_nullable', sa.Boolean(), nullable=False),
    sa.Column('references_table', sa.String(length=255), nullable=True),
    sa.Column('references_column', sa.String(length=255), nullable=True),
    sa.Column('include_in_context', sa.Boolean(), nullable=False),
    sa.Column('extra_metadata', sa.JSON(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['table_id'], ['db_tables.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('table_id', 'column_name', name='uq_db_columns_table_id_column_name')
    )
    op.create_index(op.f('ix_db_columns_id'), 'db_columns', ['id'], unique=False)
    op.create_table('table_relationships',
    sa.Column('database_id', sa.UUID(), nullable=False),
    sa.Column('from_table_id', sa.UUID(), nullable=False),
    sa.Column('to_table_id', sa.UUID(), nullable=False),
    sa.Column('relationship_type', sa.String(length=50), nullable=True),
    sa.Column('from_column', sa.String(length=255), nullable=False),
    sa.Column('to_column', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('embedding', pgvector.sqlalchemy.vector.VECTOR(dim=1536), nullable=True),
    sa.Column('extra_metadata', sa.JSON(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['database_id'], ['databases.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['from_table_id'], ['db_tables.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['to_table_id'], ['db_tables.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_table_relationships_id'), 'table_relationships', ['id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_table_relationships_id'), table_name='table_relationships')
    op.drop_table('table_relationships')
    op.drop_index(op.f('ix_db_columns_id'), table_name='db_columns')
    op.drop_table('db_columns')
    op.drop_index(op.f('ix_query_usage_stats_id'), table_name='query_usage_stats')
    op.drop_table('query_usage_stats')
    op.drop_index(op.f('ix_query_feedback_id'), table_name='query_feedback')
    op.drop_table('query_feedback')
    op.drop_index(op.f('ix_db_tables_id'), table_name='db_tables')
    op.drop_table('db_tables')
    op.drop_index(op.f('ix_sql_samples_id'), table_name='sql_samples')
    op.drop_table('sql_samples')
    op.drop_index(op.f('ix_database_schemas_id'), table_name='database_schemas')
    op.drop_table('database_schemas')
    op.drop_index(op.f('ix_databases_id'), table_name='databases')
    op.drop_table('databases')
    # ### end Alembic commands ###
